// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_5fdata_2eproto;
class CPU;
class CPUDefaultTypeInternal;
extern CPUDefaultTypeInternal _CPU_default_instance_;
class Disk;
class DiskDefaultTypeInternal;
extern DiskDefaultTypeInternal _Disk_default_instance_;
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class Process;
class ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class system_data;
class system_dataDefaultTypeInternal;
extern system_dataDefaultTypeInternal _system_data_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CPU* Arena::CreateMaybeMessage<::CPU>(Arena*);
template<> ::Disk* Arena::CreateMaybeMessage<::Disk>(Arena*);
template<> ::Memory* Arena::CreateMaybeMessage<::Memory>(Arena*);
template<> ::Process* Arena::CreateMaybeMessage<::Process>(Arena*);
template<> ::system_data* Arena::CreateMaybeMessage<::system_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CPU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPU) */ {
 public:
  inline CPU() : CPU(nullptr) {};
  virtual ~CPU();

  CPU(const CPU& from);
  CPU(CPU&& from) noexcept
    : CPU() {
    *this = ::std::move(from);
  }

  inline CPU& operator=(const CPU& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPU& operator=(CPU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPU* internal_default_instance() {
    return reinterpret_cast<const CPU*>(
               &_CPU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPU& a, CPU& b) {
    a.Swap(&b);
  }
  inline void Swap(CPU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPU* New() const final {
    return CreateMaybeMessage<CPU>(nullptr);
  }

  CPU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPU& from);
  void MergeFrom(const CPU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPU";
  }
  protected:
  explicit CPU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_5fdata_2eproto);
    return ::descriptor_table_system_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUsageFieldNumber = 2,
    kUserUsageFieldNumber = 3,
    kSystemUsageFieldNumber = 4,
    kIrqUsageFieldNumber = 5,
    kSoftirqUsageFieldNumber = 6,
    kRunningTimeFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float usage = 2;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  float usage() const;
  void set_usage(float value);
  private:
  float _internal_usage() const;
  void _internal_set_usage(float value);
  public:

  // optional float user_usage = 3;
  bool has_user_usage() const;
  private:
  bool _internal_has_user_usage() const;
  public:
  void clear_user_usage();
  float user_usage() const;
  void set_user_usage(float value);
  private:
  float _internal_user_usage() const;
  void _internal_set_user_usage(float value);
  public:

  // optional float system_usage = 4;
  bool has_system_usage() const;
  private:
  bool _internal_has_system_usage() const;
  public:
  void clear_system_usage();
  float system_usage() const;
  void set_system_usage(float value);
  private:
  float _internal_system_usage() const;
  void _internal_set_system_usage(float value);
  public:

  // optional float irq_usage = 5;
  bool has_irq_usage() const;
  private:
  bool _internal_has_irq_usage() const;
  public:
  void clear_irq_usage();
  float irq_usage() const;
  void set_irq_usage(float value);
  private:
  float _internal_irq_usage() const;
  void _internal_set_irq_usage(float value);
  public:

  // optional float softirq_usage = 6;
  bool has_softirq_usage() const;
  private:
  bool _internal_has_softirq_usage() const;
  public:
  void clear_softirq_usage();
  float softirq_usage() const;
  void set_softirq_usage(float value);
  private:
  float _internal_softirq_usage() const;
  void _internal_set_softirq_usage(float value);
  public:

  // optional int32 running_time = 7;
  bool has_running_time() const;
  private:
  bool _internal_has_running_time() const;
  public:
  void clear_running_time();
  ::PROTOBUF_NAMESPACE_ID::int32 running_time() const;
  void set_running_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_running_time() const;
  void _internal_set_running_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float usage_;
  float user_usage_;
  float system_usage_;
  float irq_usage_;
  float softirq_usage_;
  ::PROTOBUF_NAMESPACE_ID::int32 running_time_;
  friend struct ::TableStruct_system_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Memory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Memory) */ {
 public:
  inline Memory() : Memory(nullptr) {};
  virtual ~Memory();

  Memory(const Memory& from);
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memory& operator=(Memory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(Memory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Memory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return CreateMaybeMessage<Memory>(nullptr);
  }

  Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Memory";
  }
  protected:
  explicit Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_5fdata_2eproto);
    return ::descriptor_table_system_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
    kUsedFieldNumber = 3,
    kFreeFieldNumber = 4,
    kSharedFieldNumber = 5,
    kBufferOrCachedFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float total = 2;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  float total() const;
  void set_total(float value);
  private:
  float _internal_total() const;
  void _internal_set_total(float value);
  public:

  // optional float used = 3;
  bool has_used() const;
  private:
  bool _internal_has_used() const;
  public:
  void clear_used();
  float used() const;
  void set_used(float value);
  private:
  float _internal_used() const;
  void _internal_set_used(float value);
  public:

  // optional float free = 4;
  bool has_free() const;
  private:
  bool _internal_has_free() const;
  public:
  void clear_free();
  float free() const;
  void set_free(float value);
  private:
  float _internal_free() const;
  void _internal_set_free(float value);
  public:

  // optional float shared = 5;
  bool has_shared() const;
  private:
  bool _internal_has_shared() const;
  public:
  void clear_shared();
  float shared() const;
  void set_shared(float value);
  private:
  float _internal_shared() const;
  void _internal_set_shared(float value);
  public:

  // optional float buffer_or_cached = 6;
  bool has_buffer_or_cached() const;
  private:
  bool _internal_has_buffer_or_cached() const;
  public:
  void clear_buffer_or_cached();
  float buffer_or_cached() const;
  void set_buffer_or_cached(float value);
  private:
  float _internal_buffer_or_cached() const;
  void _internal_set_buffer_or_cached(float value);
  public:

  // @@protoc_insertion_point(class_scope:Memory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float total_;
  float used_;
  float free_;
  float shared_;
  float buffer_or_cached_;
  friend struct ::TableStruct_system_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Disk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Disk) */ {
 public:
  inline Disk() : Disk(nullptr) {};
  virtual ~Disk();

  Disk(const Disk& from);
  Disk(Disk&& from) noexcept
    : Disk() {
    *this = ::std::move(from);
  }

  inline Disk& operator=(const Disk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disk& operator=(Disk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Disk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Disk* internal_default_instance() {
    return reinterpret_cast<const Disk*>(
               &_Disk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Disk& a, Disk& b) {
    a.Swap(&b);
  }
  inline void Swap(Disk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Disk* New() const final {
    return CreateMaybeMessage<Disk>(nullptr);
  }

  Disk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Disk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Disk& from);
  void MergeFrom(const Disk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Disk";
  }
  protected:
  explicit Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_5fdata_2eproto);
    return ::descriptor_table_system_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileSystemFieldNumber = 1,
    kMountFieldNumber = 4,
    kTotalFieldNumber = 2,
    kUsageFieldNumber = 3,
  };
  // optional string file_system = 1;
  bool has_file_system() const;
  private:
  bool _internal_has_file_system() const;
  public:
  void clear_file_system();
  const std::string& file_system() const;
  void set_file_system(const std::string& value);
  void set_file_system(std::string&& value);
  void set_file_system(const char* value);
  void set_file_system(const char* value, size_t size);
  std::string* mutable_file_system();
  std::string* release_file_system();
  void set_allocated_file_system(std::string* file_system);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_system();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_system(
      std::string* file_system);
  private:
  const std::string& _internal_file_system() const;
  void _internal_set_file_system(const std::string& value);
  std::string* _internal_mutable_file_system();
  public:

  // optional string mount = 4;
  bool has_mount() const;
  private:
  bool _internal_has_mount() const;
  public:
  void clear_mount();
  const std::string& mount() const;
  void set_mount(const std::string& value);
  void set_mount(std::string&& value);
  void set_mount(const char* value);
  void set_mount(const char* value, size_t size);
  std::string* mutable_mount();
  std::string* release_mount();
  void set_allocated_mount(std::string* mount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mount(
      std::string* mount);
  private:
  const std::string& _internal_mount() const;
  void _internal_set_mount(const std::string& value);
  std::string* _internal_mutable_mount();
  public:

  // optional float total = 2;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  float total() const;
  void set_total(float value);
  private:
  float _internal_total() const;
  void _internal_set_total(float value);
  public:

  // optional float usage = 3;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  float usage() const;
  void set_usage(float value);
  private:
  float _internal_usage() const;
  void _internal_set_usage(float value);
  public:

  // @@protoc_insertion_point(class_scope:Disk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mount_;
  float total_;
  float usage_;
  friend struct ::TableStruct_system_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Process PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Process) */ {
 public:
  inline Process() : Process(nullptr) {};
  virtual ~Process();

  Process(const Process& from);
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline Process& operator=(Process&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }
  inline void Swap(Process* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Process* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Process* New() const final {
    return CreateMaybeMessage<Process>(nullptr);
  }

  Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Process& from);
  void MergeFrom(const Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Process";
  }
  protected:
  explicit Process(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_5fdata_2eproto);
    return ::descriptor_table_system_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kRunningFieldNumber = 2,
    kSleepingFieldNumber = 3,
    kStoppedFieldNumber = 4,
    kZombieFieldNumber = 5,
  };
  // optional int32 total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 running = 2;
  bool has_running() const;
  private:
  bool _internal_has_running() const;
  public:
  void clear_running();
  ::PROTOBUF_NAMESPACE_ID::int32 running() const;
  void set_running(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_running() const;
  void _internal_set_running(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sleeping = 3;
  bool has_sleeping() const;
  private:
  bool _internal_has_sleeping() const;
  public:
  void clear_sleeping();
  ::PROTOBUF_NAMESPACE_ID::int32 sleeping() const;
  void set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sleeping() const;
  void _internal_set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 stopped = 4;
  bool has_stopped() const;
  private:
  bool _internal_has_stopped() const;
  public:
  void clear_stopped();
  ::PROTOBUF_NAMESPACE_ID::int32 stopped() const;
  void set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stopped() const;
  void _internal_set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 zombie = 5;
  bool has_zombie() const;
  private:
  bool _internal_has_zombie() const;
  public:
  void clear_zombie();
  ::PROTOBUF_NAMESPACE_ID::int32 zombie() const;
  void set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zombie() const;
  void _internal_set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Process)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 running_;
  ::PROTOBUF_NAMESPACE_ID::int32 sleeping_;
  ::PROTOBUF_NAMESPACE_ID::int32 stopped_;
  ::PROTOBUF_NAMESPACE_ID::int32 zombie_;
  friend struct ::TableStruct_system_5fdata_2eproto;
};
// -------------------------------------------------------------------

class system_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:system_data) */ {
 public:
  inline system_data() : system_data(nullptr) {};
  virtual ~system_data();

  system_data(const system_data& from);
  system_data(system_data&& from) noexcept
    : system_data() {
    *this = ::std::move(from);
  }

  inline system_data& operator=(const system_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline system_data& operator=(system_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const system_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const system_data* internal_default_instance() {
    return reinterpret_cast<const system_data*>(
               &_system_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(system_data& a, system_data& b) {
    a.Swap(&b);
  }
  inline void Swap(system_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(system_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline system_data* New() const final {
    return CreateMaybeMessage<system_data>(nullptr);
  }

  system_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<system_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const system_data& from);
  void MergeFrom(const system_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(system_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "system_data";
  }
  protected:
  explicit system_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_5fdata_2eproto);
    return ::descriptor_table_system_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpusFieldNumber = 2,
    kDisksFieldNumber = 5,
    kTasksFieldNumber = 6,
    kSysCpuFieldNumber = 1,
    kPhyMemFieldNumber = 3,
    kSwapMemFieldNumber = 4,
  };
  // repeated .CPU cpus = 2;
  int cpus_size() const;
  private:
  int _internal_cpus_size() const;
  public:
  void clear_cpus();
  ::CPU* mutable_cpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPU >*
      mutable_cpus();
  private:
  const ::CPU& _internal_cpus(int index) const;
  ::CPU* _internal_add_cpus();
  public:
  const ::CPU& cpus(int index) const;
  ::CPU* add_cpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPU >&
      cpus() const;

  // repeated .Disk disks = 5;
  int disks_size() const;
  private:
  int _internal_disks_size() const;
  public:
  void clear_disks();
  ::Disk* mutable_disks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Disk >*
      mutable_disks();
  private:
  const ::Disk& _internal_disks(int index) const;
  ::Disk* _internal_add_disks();
  public:
  const ::Disk& disks(int index) const;
  ::Disk* add_disks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Disk >&
      disks() const;

  // repeated .Process tasks = 6;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::Process* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Process >*
      mutable_tasks();
  private:
  const ::Process& _internal_tasks(int index) const;
  ::Process* _internal_add_tasks();
  public:
  const ::Process& tasks(int index) const;
  ::Process* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Process >&
      tasks() const;

  // optional .CPU sys_cpu = 1;
  bool has_sys_cpu() const;
  private:
  bool _internal_has_sys_cpu() const;
  public:
  void clear_sys_cpu();
  const ::CPU& sys_cpu() const;
  ::CPU* release_sys_cpu();
  ::CPU* mutable_sys_cpu();
  void set_allocated_sys_cpu(::CPU* sys_cpu);
  private:
  const ::CPU& _internal_sys_cpu() const;
  ::CPU* _internal_mutable_sys_cpu();
  public:
  void unsafe_arena_set_allocated_sys_cpu(
      ::CPU* sys_cpu);
  ::CPU* unsafe_arena_release_sys_cpu();

  // optional .Memory phy_mem = 3;
  bool has_phy_mem() const;
  private:
  bool _internal_has_phy_mem() const;
  public:
  void clear_phy_mem();
  const ::Memory& phy_mem() const;
  ::Memory* release_phy_mem();
  ::Memory* mutable_phy_mem();
  void set_allocated_phy_mem(::Memory* phy_mem);
  private:
  const ::Memory& _internal_phy_mem() const;
  ::Memory* _internal_mutable_phy_mem();
  public:
  void unsafe_arena_set_allocated_phy_mem(
      ::Memory* phy_mem);
  ::Memory* unsafe_arena_release_phy_mem();

  // optional .Memory swap_mem = 4;
  bool has_swap_mem() const;
  private:
  bool _internal_has_swap_mem() const;
  public:
  void clear_swap_mem();
  const ::Memory& swap_mem() const;
  ::Memory* release_swap_mem();
  ::Memory* mutable_swap_mem();
  void set_allocated_swap_mem(::Memory* swap_mem);
  private:
  const ::Memory& _internal_swap_mem() const;
  ::Memory* _internal_mutable_swap_mem();
  public:
  void unsafe_arena_set_allocated_swap_mem(
      ::Memory* swap_mem);
  ::Memory* unsafe_arena_release_swap_mem();

  // @@protoc_insertion_point(class_scope:system_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPU > cpus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Disk > disks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Process > tasks_;
  ::CPU* sys_cpu_;
  ::Memory* phy_mem_;
  ::Memory* swap_mem_;
  friend struct ::TableStruct_system_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPU

// optional string name = 1;
inline bool CPU::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPU::has_name() const {
  return _internal_has_name();
}
inline void CPU::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPU::name() const {
  // @@protoc_insertion_point(field_get:CPU.name)
  return _internal_name();
}
inline void CPU::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CPU.name)
}
inline std::string* CPU::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CPU.name)
  return _internal_mutable_name();
}
inline const std::string& CPU::_internal_name() const {
  return name_.Get();
}
inline void CPU::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CPU::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPU.name)
}
inline void CPU::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CPU.name)
}
inline void CPU::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPU.name)
}
inline std::string* CPU::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CPU::release_name() {
  // @@protoc_insertion_point(field_release:CPU.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPU::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPU.name)
}
inline std::string* CPU::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CPU.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CPU::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPU.name)
}

// optional float usage = 2;
inline bool CPU::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPU::has_usage() const {
  return _internal_has_usage();
}
inline void CPU::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CPU::_internal_usage() const {
  return usage_;
}
inline float CPU::usage() const {
  // @@protoc_insertion_point(field_get:CPU.usage)
  return _internal_usage();
}
inline void CPU::_internal_set_usage(float value) {
  _has_bits_[0] |= 0x00000002u;
  usage_ = value;
}
inline void CPU::set_usage(float value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:CPU.usage)
}

// optional float user_usage = 3;
inline bool CPU::_internal_has_user_usage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPU::has_user_usage() const {
  return _internal_has_user_usage();
}
inline void CPU::clear_user_usage() {
  user_usage_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CPU::_internal_user_usage() const {
  return user_usage_;
}
inline float CPU::user_usage() const {
  // @@protoc_insertion_point(field_get:CPU.user_usage)
  return _internal_user_usage();
}
inline void CPU::_internal_set_user_usage(float value) {
  _has_bits_[0] |= 0x00000004u;
  user_usage_ = value;
}
inline void CPU::set_user_usage(float value) {
  _internal_set_user_usage(value);
  // @@protoc_insertion_point(field_set:CPU.user_usage)
}

// optional float system_usage = 4;
inline bool CPU::_internal_has_system_usage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPU::has_system_usage() const {
  return _internal_has_system_usage();
}
inline void CPU::clear_system_usage() {
  system_usage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CPU::_internal_system_usage() const {
  return system_usage_;
}
inline float CPU::system_usage() const {
  // @@protoc_insertion_point(field_get:CPU.system_usage)
  return _internal_system_usage();
}
inline void CPU::_internal_set_system_usage(float value) {
  _has_bits_[0] |= 0x00000008u;
  system_usage_ = value;
}
inline void CPU::set_system_usage(float value) {
  _internal_set_system_usage(value);
  // @@protoc_insertion_point(field_set:CPU.system_usage)
}

// optional float irq_usage = 5;
inline bool CPU::_internal_has_irq_usage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPU::has_irq_usage() const {
  return _internal_has_irq_usage();
}
inline void CPU::clear_irq_usage() {
  irq_usage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CPU::_internal_irq_usage() const {
  return irq_usage_;
}
inline float CPU::irq_usage() const {
  // @@protoc_insertion_point(field_get:CPU.irq_usage)
  return _internal_irq_usage();
}
inline void CPU::_internal_set_irq_usage(float value) {
  _has_bits_[0] |= 0x00000010u;
  irq_usage_ = value;
}
inline void CPU::set_irq_usage(float value) {
  _internal_set_irq_usage(value);
  // @@protoc_insertion_point(field_set:CPU.irq_usage)
}

// optional float softirq_usage = 6;
inline bool CPU::_internal_has_softirq_usage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPU::has_softirq_usage() const {
  return _internal_has_softirq_usage();
}
inline void CPU::clear_softirq_usage() {
  softirq_usage_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CPU::_internal_softirq_usage() const {
  return softirq_usage_;
}
inline float CPU::softirq_usage() const {
  // @@protoc_insertion_point(field_get:CPU.softirq_usage)
  return _internal_softirq_usage();
}
inline void CPU::_internal_set_softirq_usage(float value) {
  _has_bits_[0] |= 0x00000020u;
  softirq_usage_ = value;
}
inline void CPU::set_softirq_usage(float value) {
  _internal_set_softirq_usage(value);
  // @@protoc_insertion_point(field_set:CPU.softirq_usage)
}

// optional int32 running_time = 7;
inline bool CPU::_internal_has_running_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPU::has_running_time() const {
  return _internal_has_running_time();
}
inline void CPU::clear_running_time() {
  running_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPU::_internal_running_time() const {
  return running_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPU::running_time() const {
  // @@protoc_insertion_point(field_get:CPU.running_time)
  return _internal_running_time();
}
inline void CPU::_internal_set_running_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  running_time_ = value;
}
inline void CPU::set_running_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_running_time(value);
  // @@protoc_insertion_point(field_set:CPU.running_time)
}

// -------------------------------------------------------------------

// Memory

// optional string name = 1;
inline bool Memory::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Memory::has_name() const {
  return _internal_has_name();
}
inline void Memory::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Memory::name() const {
  // @@protoc_insertion_point(field_get:Memory.name)
  return _internal_name();
}
inline void Memory::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Memory.name)
}
inline std::string* Memory::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Memory.name)
  return _internal_mutable_name();
}
inline const std::string& Memory::_internal_name() const {
  return name_.Get();
}
inline void Memory::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Memory::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Memory.name)
}
inline void Memory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Memory.name)
}
inline void Memory::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Memory.name)
}
inline std::string* Memory::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Memory::release_name() {
  // @@protoc_insertion_point(field_release:Memory.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Memory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Memory.name)
}
inline std::string* Memory::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Memory.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Memory::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Memory.name)
}

// optional float total = 2;
inline bool Memory::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Memory::has_total() const {
  return _internal_has_total();
}
inline void Memory::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Memory::_internal_total() const {
  return total_;
}
inline float Memory::total() const {
  // @@protoc_insertion_point(field_get:Memory.total)
  return _internal_total();
}
inline void Memory::_internal_set_total(float value) {
  _has_bits_[0] |= 0x00000002u;
  total_ = value;
}
inline void Memory::set_total(float value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:Memory.total)
}

// optional float used = 3;
inline bool Memory::_internal_has_used() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Memory::has_used() const {
  return _internal_has_used();
}
inline void Memory::clear_used() {
  used_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Memory::_internal_used() const {
  return used_;
}
inline float Memory::used() const {
  // @@protoc_insertion_point(field_get:Memory.used)
  return _internal_used();
}
inline void Memory::_internal_set_used(float value) {
  _has_bits_[0] |= 0x00000004u;
  used_ = value;
}
inline void Memory::set_used(float value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:Memory.used)
}

// optional float free = 4;
inline bool Memory::_internal_has_free() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Memory::has_free() const {
  return _internal_has_free();
}
inline void Memory::clear_free() {
  free_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Memory::_internal_free() const {
  return free_;
}
inline float Memory::free() const {
  // @@protoc_insertion_point(field_get:Memory.free)
  return _internal_free();
}
inline void Memory::_internal_set_free(float value) {
  _has_bits_[0] |= 0x00000008u;
  free_ = value;
}
inline void Memory::set_free(float value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:Memory.free)
}

// optional float shared = 5;
inline bool Memory::_internal_has_shared() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Memory::has_shared() const {
  return _internal_has_shared();
}
inline void Memory::clear_shared() {
  shared_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Memory::_internal_shared() const {
  return shared_;
}
inline float Memory::shared() const {
  // @@protoc_insertion_point(field_get:Memory.shared)
  return _internal_shared();
}
inline void Memory::_internal_set_shared(float value) {
  _has_bits_[0] |= 0x00000010u;
  shared_ = value;
}
inline void Memory::set_shared(float value) {
  _internal_set_shared(value);
  // @@protoc_insertion_point(field_set:Memory.shared)
}

// optional float buffer_or_cached = 6;
inline bool Memory::_internal_has_buffer_or_cached() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Memory::has_buffer_or_cached() const {
  return _internal_has_buffer_or_cached();
}
inline void Memory::clear_buffer_or_cached() {
  buffer_or_cached_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Memory::_internal_buffer_or_cached() const {
  return buffer_or_cached_;
}
inline float Memory::buffer_or_cached() const {
  // @@protoc_insertion_point(field_get:Memory.buffer_or_cached)
  return _internal_buffer_or_cached();
}
inline void Memory::_internal_set_buffer_or_cached(float value) {
  _has_bits_[0] |= 0x00000020u;
  buffer_or_cached_ = value;
}
inline void Memory::set_buffer_or_cached(float value) {
  _internal_set_buffer_or_cached(value);
  // @@protoc_insertion_point(field_set:Memory.buffer_or_cached)
}

// -------------------------------------------------------------------

// Disk

// optional string file_system = 1;
inline bool Disk::_internal_has_file_system() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Disk::has_file_system() const {
  return _internal_has_file_system();
}
inline void Disk::clear_file_system() {
  file_system_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Disk::file_system() const {
  // @@protoc_insertion_point(field_get:Disk.file_system)
  return _internal_file_system();
}
inline void Disk::set_file_system(const std::string& value) {
  _internal_set_file_system(value);
  // @@protoc_insertion_point(field_set:Disk.file_system)
}
inline std::string* Disk::mutable_file_system() {
  // @@protoc_insertion_point(field_mutable:Disk.file_system)
  return _internal_mutable_file_system();
}
inline const std::string& Disk::_internal_file_system() const {
  return file_system_.Get();
}
inline void Disk::_internal_set_file_system(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Disk::set_file_system(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_system_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Disk.file_system)
}
inline void Disk::set_file_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Disk.file_system)
}
inline void Disk::set_file_system(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Disk.file_system)
}
inline std::string* Disk::_internal_mutable_file_system() {
  _has_bits_[0] |= 0x00000001u;
  return file_system_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Disk::release_file_system() {
  // @@protoc_insertion_point(field_release:Disk.file_system)
  if (!_internal_has_file_system()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_system_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Disk::set_allocated_file_system(std::string* file_system) {
  if (file_system != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_system_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_system,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Disk.file_system)
}
inline std::string* Disk::unsafe_arena_release_file_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Disk.file_system)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return file_system_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Disk::unsafe_arena_set_allocated_file_system(
    std::string* file_system) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_system != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_system_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_system, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Disk.file_system)
}

// optional float total = 2;
inline bool Disk::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Disk::has_total() const {
  return _internal_has_total();
}
inline void Disk::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Disk::_internal_total() const {
  return total_;
}
inline float Disk::total() const {
  // @@protoc_insertion_point(field_get:Disk.total)
  return _internal_total();
}
inline void Disk::_internal_set_total(float value) {
  _has_bits_[0] |= 0x00000004u;
  total_ = value;
}
inline void Disk::set_total(float value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:Disk.total)
}

// optional float usage = 3;
inline bool Disk::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Disk::has_usage() const {
  return _internal_has_usage();
}
inline void Disk::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Disk::_internal_usage() const {
  return usage_;
}
inline float Disk::usage() const {
  // @@protoc_insertion_point(field_get:Disk.usage)
  return _internal_usage();
}
inline void Disk::_internal_set_usage(float value) {
  _has_bits_[0] |= 0x00000008u;
  usage_ = value;
}
inline void Disk::set_usage(float value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:Disk.usage)
}

// optional string mount = 4;
inline bool Disk::_internal_has_mount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Disk::has_mount() const {
  return _internal_has_mount();
}
inline void Disk::clear_mount() {
  mount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Disk::mount() const {
  // @@protoc_insertion_point(field_get:Disk.mount)
  return _internal_mount();
}
inline void Disk::set_mount(const std::string& value) {
  _internal_set_mount(value);
  // @@protoc_insertion_point(field_set:Disk.mount)
}
inline std::string* Disk::mutable_mount() {
  // @@protoc_insertion_point(field_mutable:Disk.mount)
  return _internal_mutable_mount();
}
inline const std::string& Disk::_internal_mount() const {
  return mount_.Get();
}
inline void Disk::_internal_set_mount(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Disk::set_mount(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Disk.mount)
}
inline void Disk::set_mount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Disk.mount)
}
inline void Disk::set_mount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Disk.mount)
}
inline std::string* Disk::_internal_mutable_mount() {
  _has_bits_[0] |= 0x00000002u;
  return mount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Disk::release_mount() {
  // @@protoc_insertion_point(field_release:Disk.mount)
  if (!_internal_has_mount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Disk::set_allocated_mount(std::string* mount) {
  if (mount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Disk.mount)
}
inline std::string* Disk::unsafe_arena_release_mount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Disk.mount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Disk::unsafe_arena_set_allocated_mount(
    std::string* mount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Disk.mount)
}

// -------------------------------------------------------------------

// Process

// optional int32 total = 1;
inline bool Process::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Process::has_total() const {
  return _internal_has_total();
}
inline void Process::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::total() const {
  // @@protoc_insertion_point(field_get:Process.total)
  return _internal_total();
}
inline void Process::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void Process::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:Process.total)
}

// optional int32 running = 2;
inline bool Process::_internal_has_running() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Process::has_running() const {
  return _internal_has_running();
}
inline void Process::clear_running() {
  running_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_running() const {
  return running_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::running() const {
  // @@protoc_insertion_point(field_get:Process.running)
  return _internal_running();
}
inline void Process::_internal_set_running(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  running_ = value;
}
inline void Process::set_running(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:Process.running)
}

// optional int32 sleeping = 3;
inline bool Process::_internal_has_sleeping() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Process::has_sleeping() const {
  return _internal_has_sleeping();
}
inline void Process::clear_sleeping() {
  sleeping_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_sleeping() const {
  return sleeping_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::sleeping() const {
  // @@protoc_insertion_point(field_get:Process.sleeping)
  return _internal_sleeping();
}
inline void Process::_internal_set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sleeping_ = value;
}
inline void Process::set_sleeping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sleeping(value);
  // @@protoc_insertion_point(field_set:Process.sleeping)
}

// optional int32 stopped = 4;
inline bool Process::_internal_has_stopped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Process::has_stopped() const {
  return _internal_has_stopped();
}
inline void Process::clear_stopped() {
  stopped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_stopped() const {
  return stopped_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::stopped() const {
  // @@protoc_insertion_point(field_get:Process.stopped)
  return _internal_stopped();
}
inline void Process::_internal_set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  stopped_ = value;
}
inline void Process::set_stopped(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stopped(value);
  // @@protoc_insertion_point(field_set:Process.stopped)
}

// optional int32 zombie = 5;
inline bool Process::_internal_has_zombie() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Process::has_zombie() const {
  return _internal_has_zombie();
}
inline void Process::clear_zombie() {
  zombie_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::_internal_zombie() const {
  return zombie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Process::zombie() const {
  // @@protoc_insertion_point(field_get:Process.zombie)
  return _internal_zombie();
}
inline void Process::_internal_set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  zombie_ = value;
}
inline void Process::set_zombie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zombie(value);
  // @@protoc_insertion_point(field_set:Process.zombie)
}

// -------------------------------------------------------------------

// system_data

// optional .CPU sys_cpu = 1;
inline bool system_data::_internal_has_sys_cpu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sys_cpu_ != nullptr);
  return value;
}
inline bool system_data::has_sys_cpu() const {
  return _internal_has_sys_cpu();
}
inline void system_data::clear_sys_cpu() {
  if (sys_cpu_ != nullptr) sys_cpu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CPU& system_data::_internal_sys_cpu() const {
  const ::CPU* p = sys_cpu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CPU*>(
      &::_CPU_default_instance_);
}
inline const ::CPU& system_data::sys_cpu() const {
  // @@protoc_insertion_point(field_get:system_data.sys_cpu)
  return _internal_sys_cpu();
}
inline void system_data::unsafe_arena_set_allocated_sys_cpu(
    ::CPU* sys_cpu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_cpu_);
  }
  sys_cpu_ = sys_cpu;
  if (sys_cpu) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:system_data.sys_cpu)
}
inline ::CPU* system_data::release_sys_cpu() {
  auto temp = unsafe_arena_release_sys_cpu();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CPU* system_data::unsafe_arena_release_sys_cpu() {
  // @@protoc_insertion_point(field_release:system_data.sys_cpu)
  _has_bits_[0] &= ~0x00000001u;
  ::CPU* temp = sys_cpu_;
  sys_cpu_ = nullptr;
  return temp;
}
inline ::CPU* system_data::_internal_mutable_sys_cpu() {
  _has_bits_[0] |= 0x00000001u;
  if (sys_cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPU>(GetArena());
    sys_cpu_ = p;
  }
  return sys_cpu_;
}
inline ::CPU* system_data::mutable_sys_cpu() {
  // @@protoc_insertion_point(field_mutable:system_data.sys_cpu)
  return _internal_mutable_sys_cpu();
}
inline void system_data::set_allocated_sys_cpu(::CPU* sys_cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sys_cpu_;
  }
  if (sys_cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sys_cpu);
    if (message_arena != submessage_arena) {
      sys_cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_cpu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sys_cpu_ = sys_cpu;
  // @@protoc_insertion_point(field_set_allocated:system_data.sys_cpu)
}

// repeated .CPU cpus = 2;
inline int system_data::_internal_cpus_size() const {
  return cpus_.size();
}
inline int system_data::cpus_size() const {
  return _internal_cpus_size();
}
inline void system_data::clear_cpus() {
  cpus_.Clear();
}
inline ::CPU* system_data::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:system_data.cpus)
  return cpus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPU >*
system_data::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:system_data.cpus)
  return &cpus_;
}
inline const ::CPU& system_data::_internal_cpus(int index) const {
  return cpus_.Get(index);
}
inline const ::CPU& system_data::cpus(int index) const {
  // @@protoc_insertion_point(field_get:system_data.cpus)
  return _internal_cpus(index);
}
inline ::CPU* system_data::_internal_add_cpus() {
  return cpus_.Add();
}
inline ::CPU* system_data::add_cpus() {
  // @@protoc_insertion_point(field_add:system_data.cpus)
  return _internal_add_cpus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPU >&
system_data::cpus() const {
  // @@protoc_insertion_point(field_list:system_data.cpus)
  return cpus_;
}

// optional .Memory phy_mem = 3;
inline bool system_data::_internal_has_phy_mem() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || phy_mem_ != nullptr);
  return value;
}
inline bool system_data::has_phy_mem() const {
  return _internal_has_phy_mem();
}
inline void system_data::clear_phy_mem() {
  if (phy_mem_ != nullptr) phy_mem_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Memory& system_data::_internal_phy_mem() const {
  const ::Memory* p = phy_mem_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Memory*>(
      &::_Memory_default_instance_);
}
inline const ::Memory& system_data::phy_mem() const {
  // @@protoc_insertion_point(field_get:system_data.phy_mem)
  return _internal_phy_mem();
}
inline void system_data::unsafe_arena_set_allocated_phy_mem(
    ::Memory* phy_mem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phy_mem_);
  }
  phy_mem_ = phy_mem;
  if (phy_mem) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:system_data.phy_mem)
}
inline ::Memory* system_data::release_phy_mem() {
  auto temp = unsafe_arena_release_phy_mem();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Memory* system_data::unsafe_arena_release_phy_mem() {
  // @@protoc_insertion_point(field_release:system_data.phy_mem)
  _has_bits_[0] &= ~0x00000002u;
  ::Memory* temp = phy_mem_;
  phy_mem_ = nullptr;
  return temp;
}
inline ::Memory* system_data::_internal_mutable_phy_mem() {
  _has_bits_[0] |= 0x00000002u;
  if (phy_mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Memory>(GetArena());
    phy_mem_ = p;
  }
  return phy_mem_;
}
inline ::Memory* system_data::mutable_phy_mem() {
  // @@protoc_insertion_point(field_mutable:system_data.phy_mem)
  return _internal_mutable_phy_mem();
}
inline void system_data::set_allocated_phy_mem(::Memory* phy_mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phy_mem_;
  }
  if (phy_mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phy_mem);
    if (message_arena != submessage_arena) {
      phy_mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phy_mem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  phy_mem_ = phy_mem;
  // @@protoc_insertion_point(field_set_allocated:system_data.phy_mem)
}

// optional .Memory swap_mem = 4;
inline bool system_data::_internal_has_swap_mem() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || swap_mem_ != nullptr);
  return value;
}
inline bool system_data::has_swap_mem() const {
  return _internal_has_swap_mem();
}
inline void system_data::clear_swap_mem() {
  if (swap_mem_ != nullptr) swap_mem_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Memory& system_data::_internal_swap_mem() const {
  const ::Memory* p = swap_mem_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Memory*>(
      &::_Memory_default_instance_);
}
inline const ::Memory& system_data::swap_mem() const {
  // @@protoc_insertion_point(field_get:system_data.swap_mem)
  return _internal_swap_mem();
}
inline void system_data::unsafe_arena_set_allocated_swap_mem(
    ::Memory* swap_mem) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swap_mem_);
  }
  swap_mem_ = swap_mem;
  if (swap_mem) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:system_data.swap_mem)
}
inline ::Memory* system_data::release_swap_mem() {
  auto temp = unsafe_arena_release_swap_mem();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Memory* system_data::unsafe_arena_release_swap_mem() {
  // @@protoc_insertion_point(field_release:system_data.swap_mem)
  _has_bits_[0] &= ~0x00000004u;
  ::Memory* temp = swap_mem_;
  swap_mem_ = nullptr;
  return temp;
}
inline ::Memory* system_data::_internal_mutable_swap_mem() {
  _has_bits_[0] |= 0x00000004u;
  if (swap_mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Memory>(GetArena());
    swap_mem_ = p;
  }
  return swap_mem_;
}
inline ::Memory* system_data::mutable_swap_mem() {
  // @@protoc_insertion_point(field_mutable:system_data.swap_mem)
  return _internal_mutable_swap_mem();
}
inline void system_data::set_allocated_swap_mem(::Memory* swap_mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete swap_mem_;
  }
  if (swap_mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(swap_mem);
    if (message_arena != submessage_arena) {
      swap_mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swap_mem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  swap_mem_ = swap_mem;
  // @@protoc_insertion_point(field_set_allocated:system_data.swap_mem)
}

// repeated .Disk disks = 5;
inline int system_data::_internal_disks_size() const {
  return disks_.size();
}
inline int system_data::disks_size() const {
  return _internal_disks_size();
}
inline void system_data::clear_disks() {
  disks_.Clear();
}
inline ::Disk* system_data::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:system_data.disks)
  return disks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Disk >*
system_data::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:system_data.disks)
  return &disks_;
}
inline const ::Disk& system_data::_internal_disks(int index) const {
  return disks_.Get(index);
}
inline const ::Disk& system_data::disks(int index) const {
  // @@protoc_insertion_point(field_get:system_data.disks)
  return _internal_disks(index);
}
inline ::Disk* system_data::_internal_add_disks() {
  return disks_.Add();
}
inline ::Disk* system_data::add_disks() {
  // @@protoc_insertion_point(field_add:system_data.disks)
  return _internal_add_disks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Disk >&
system_data::disks() const {
  // @@protoc_insertion_point(field_list:system_data.disks)
  return disks_;
}

// repeated .Process tasks = 6;
inline int system_data::_internal_tasks_size() const {
  return tasks_.size();
}
inline int system_data::tasks_size() const {
  return _internal_tasks_size();
}
inline void system_data::clear_tasks() {
  tasks_.Clear();
}
inline ::Process* system_data::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:system_data.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Process >*
system_data::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:system_data.tasks)
  return &tasks_;
}
inline const ::Process& system_data::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::Process& system_data::tasks(int index) const {
  // @@protoc_insertion_point(field_get:system_data.tasks)
  return _internal_tasks(index);
}
inline ::Process* system_data::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::Process* system_data::add_tasks() {
  // @@protoc_insertion_point(field_add:system_data.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Process >&
system_data::tasks() const {
  // @@protoc_insertion_point(field_list:system_data.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_5fdata_2eproto
