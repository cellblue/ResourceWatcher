// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_data.proto

#include "system_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_system_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CPU;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Disk;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Memory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Process;
}  // namespace protobuf_system_5fdata_2eproto
class CPUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CPU>
      _instance;
} _CPU_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Memory>
      _instance;
} _Memory_default_instance_;
class DiskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Disk>
      _instance;
} _Disk_default_instance_;
class ProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Process>
      _instance;
} _Process_default_instance_;
class system_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<system_data>
      _instance;
} _system_data_default_instance_;
namespace protobuf_system_5fdata_2eproto {
static void InitDefaultsCPU() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPU_default_instance_;
    new (ptr) ::CPU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPU::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CPU =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCPU}, {}};

static void InitDefaultsMemory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Memory_default_instance_;
    new (ptr) ::Memory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Memory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Memory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemory}, {}};

static void InitDefaultsDisk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Disk_default_instance_;
    new (ptr) ::Disk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Disk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Disk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDisk}, {}};

static void InitDefaultsProcess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Process_default_instance_;
    new (ptr) ::Process();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Process::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Process =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProcess}, {}};

static void InitDefaultssystem_data() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_system_data_default_instance_;
    new (ptr) ::system_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::system_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_system_data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultssystem_data}, {
      &protobuf_system_5fdata_2eproto::scc_info_CPU.base,
      &protobuf_system_5fdata_2eproto::scc_info_Memory.base,
      &protobuf_system_5fdata_2eproto::scc_info_Disk.base,
      &protobuf_system_5fdata_2eproto::scc_info_Process.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CPU.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Memory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Disk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Process.base);
  ::google::protobuf::internal::InitSCC(&scc_info_system_data.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, user_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, system_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, irq_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, softirq_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CPU, running_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, shared_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Memory, buffer_or_cached_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, file_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Disk, mount_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, sleeping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, stopped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Process, zombie_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, sys_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, cpus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, phy_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, swap_mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, disks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::system_data, tasks_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::CPU)},
  { 19, 30, sizeof(::Memory)},
  { 36, 45, sizeof(::Disk)},
  { 49, 59, sizeof(::Process)},
  { 64, 75, sizeof(::system_data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CPU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Memory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Disk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Process_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_system_data_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "system_data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021system_data.proto\"\214\001\n\003CPU\022\014\n\004name\030\001 \001("
      "\t\022\r\n\005usage\030\002 \001(\002\022\022\n\nuser_usage\030\003 \001(\002\022\024\n\014"
      "system_usage\030\004 \001(\002\022\021\n\tirq_usage\030\005 \001(\002\022\025\n"
      "\rsoftirq_usage\030\006 \001(\002\022\024\n\014running_time\030\007 \001"
      "(\005\"k\n\006Memory\022\014\n\004name\030\001 \001(\t\022\r\n\005total\030\002 \001("
      "\002\022\014\n\004used\030\003 \001(\002\022\014\n\004free\030\004 \001(\002\022\016\n\006shared\030"
      "\005 \001(\002\022\030\n\020buffer_or_cached\030\006 \001(\002\"H\n\004Disk\022"
      "\023\n\013file_system\030\001 \001(\t\022\r\n\005total\030\002 \001(\002\022\r\n\005u"
      "sage\030\003 \001(\002\022\r\n\005mount\030\004 \001(\t\"\\\n\007Process\022\r\n\005"
      "total\030\001 \001(\005\022\017\n\007running\030\002 \001(\005\022\020\n\010sleeping"
      "\030\003 \001(\005\022\017\n\007stopped\030\004 \001(\005\022\016\n\006zombie\030\005 \001(\005\""
      "\234\001\n\013system_data\022\025\n\007sys_cpu\030\001 \001(\0132\004.CPU\022\022"
      "\n\004cpus\030\002 \003(\0132\004.CPU\022\030\n\007phy_mem\030\003 \001(\0132\007.Me"
      "mory\022\031\n\010swap_mem\030\004 \001(\0132\007.Memory\022\024\n\005disks"
      "\030\005 \003(\0132\005.Disk\022\027\n\005tasks\030\006 \003(\0132\010.Process"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_system_5fdata_2eproto

// ===================================================================

void CPU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPU::kNameFieldNumber;
const int CPU::kUsageFieldNumber;
const int CPU::kUserUsageFieldNumber;
const int CPU::kSystemUsageFieldNumber;
const int CPU::kIrqUsageFieldNumber;
const int CPU::kSoftirqUsageFieldNumber;
const int CPU::kRunningTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPU::CPU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fdata_2eproto::scc_info_CPU.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPU)
}
CPU::CPU(const CPU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_time_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
  // @@protoc_insertion_point(copy_constructor:CPU)
}

void CPU::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_time_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
}

CPU::~CPU() {
  // @@protoc_insertion_point(destructor:CPU)
  SharedDtor();
}

void CPU::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CPU::descriptor() {
  ::protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPU& CPU::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fdata_2eproto::scc_info_CPU.base);
  return *internal_default_instance();
}


void CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&usage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&running_time_) -
        reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPU)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CPU.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float usage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float user_usage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_user_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float system_usage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_system_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float irq_usage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_irq_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &irq_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float softirq_usage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_softirq_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &softirq_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 running_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_running_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPU)
  return false;
#undef DO_
}

void CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPU.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float usage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->usage(), output);
  }

  // optional float user_usage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->user_usage(), output);
  }

  // optional float system_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->system_usage(), output);
  }

  // optional float irq_usage = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->irq_usage(), output);
  }

  // optional float softirq_usage = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->softirq_usage(), output);
  }

  // optional int32 running_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->running_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPU)
}

::google::protobuf::uint8* CPU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CPU.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float usage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->usage(), target);
  }

  // optional float user_usage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->user_usage(), target);
  }

  // optional float system_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->system_usage(), target);
  }

  // optional float irq_usage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->irq_usage(), target);
  }

  // optional float softirq_usage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->softirq_usage(), target);
  }

  // optional int32 running_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->running_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPU)
  return target;
}

size_t CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float usage = 2;
    if (has_usage()) {
      total_size += 1 + 4;
    }

    // optional float user_usage = 3;
    if (has_user_usage()) {
      total_size += 1 + 4;
    }

    // optional float system_usage = 4;
    if (has_system_usage()) {
      total_size += 1 + 4;
    }

    // optional float irq_usage = 5;
    if (has_irq_usage()) {
      total_size += 1 + 4;
    }

    // optional float softirq_usage = 6;
    if (has_softirq_usage()) {
      total_size += 1 + 4;
    }

    // optional int32 running_time = 7;
    if (has_running_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->running_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPU)
  GOOGLE_DCHECK_NE(&from, this);
  const CPU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPU)
    MergeFrom(*source);
  }
}

void CPU::MergeFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_usage_ = from.user_usage_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_usage_ = from.system_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      irq_usage_ = from.irq_usage_;
    }
    if (cached_has_bits & 0x00000020u) {
      softirq_usage_ = from.softirq_usage_;
    }
    if (cached_has_bits & 0x00000040u) {
      running_time_ = from.running_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPU::CopyFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPU::IsInitialized() const {
  return true;
}

void CPU::Swap(CPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPU::InternalSwap(CPU* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usage_, other->usage_);
  swap(user_usage_, other->user_usage_);
  swap(system_usage_, other->system_usage_);
  swap(irq_usage_, other->irq_usage_);
  swap(softirq_usage_, other->softirq_usage_);
  swap(running_time_, other->running_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CPU::GetMetadata() const {
  protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kNameFieldNumber;
const int Memory::kTotalFieldNumber;
const int Memory::kUsedFieldNumber;
const int Memory::kFreeFieldNumber;
const int Memory::kSharedFieldNumber;
const int Memory::kBufferOrCachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fdata_2eproto::scc_info_Memory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Memory)
}
Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_or_cached_) -
    reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
  // @@protoc_insertion_point(copy_constructor:Memory)
}

void Memory::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_or_cached_) -
      reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  ::protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Memory& Memory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fdata_2eproto::scc_info_Memory.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffer_or_cached_) -
        reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Memory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Memory.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shared = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float buffer_or_cached = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_buffer_or_cached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buffer_or_cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Memory.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total(), output);
  }

  // optional float used = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->used(), output);
  }

  // optional float free = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->free(), output);
  }

  // optional float shared = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->shared(), output);
  }

  // optional float buffer_or_cached = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->buffer_or_cached(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Memory.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total(), target);
  }

  // optional float used = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->used(), target);
  }

  // optional float free = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->free(), target);
  }

  // optional float shared = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->shared(), target);
  }

  // optional float buffer_or_cached = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->buffer_or_cached(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Memory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float total = 2;
    if (has_total()) {
      total_size += 1 + 4;
    }

    // optional float used = 3;
    if (has_used()) {
      total_size += 1 + 4;
    }

    // optional float free = 4;
    if (has_free()) {
      total_size += 1 + 4;
    }

    // optional float shared = 5;
    if (has_shared()) {
      total_size += 1 + 4;
    }

    // optional float buffer_or_cached = 6;
    if (has_buffer_or_cached()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000004u) {
      used_ = from.used_;
    }
    if (cached_has_bits & 0x00000008u) {
      free_ = from.free_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_ = from.shared_;
    }
    if (cached_has_bits & 0x00000020u) {
      buffer_or_cached_ = from.buffer_or_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(used_, other->used_);
  swap(free_, other->free_);
  swap(shared_, other->shared_);
  swap(buffer_or_cached_, other->buffer_or_cached_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Disk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Disk::kFileSystemFieldNumber;
const int Disk::kTotalFieldNumber;
const int Disk::kUsageFieldNumber;
const int Disk::kMountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Disk::Disk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fdata_2eproto::scc_info_Disk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Disk)
}
Disk::Disk(const Disk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_system()) {
    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  mount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mount()) {
    mount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_);
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&usage_) -
    reinterpret_cast<char*>(&total_)) + sizeof(usage_));
  // @@protoc_insertion_point(copy_constructor:Disk)
}

void Disk::SharedCtor() {
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usage_) -
      reinterpret_cast<char*>(&total_)) + sizeof(usage_));
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:Disk)
  SharedDtor();
}

void Disk::SharedDtor() {
  file_system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Disk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Disk::descriptor() {
  ::protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Disk& Disk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fdata_2eproto::scc_info_Disk.base);
  return *internal_default_instance();
}


void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:Disk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      file_system_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&total_)) + sizeof(usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Disk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Disk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_system = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_system()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_system().data(), static_cast<int>(this->file_system().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Disk.file_system");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float usage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mount().data(), static_cast<int>(this->mount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Disk.mount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Disk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Disk)
  return false;
#undef DO_
}

void Disk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Disk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_system = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_system().data(), static_cast<int>(this->file_system().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Disk.file_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_system(), output);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total(), output);
  }

  // optional float usage = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->usage(), output);
  }

  // optional string mount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount().data(), static_cast<int>(this->mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Disk.mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Disk)
}

::google::protobuf::uint8* Disk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Disk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_system = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_system().data(), static_cast<int>(this->file_system().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Disk.file_system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_system(), target);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total(), target);
  }

  // optional float usage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->usage(), target);
  }

  // optional string mount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mount().data(), static_cast<int>(this->mount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Disk.mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Disk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string file_system = 1;
    if (has_file_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_system());
    }

    // optional string mount = 4;
    if (has_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount());
    }

    // optional float total = 2;
    if (has_total()) {
      total_size += 1 + 4;
    }

    // optional float usage = 3;
    if (has_usage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Disk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Disk)
  GOOGLE_DCHECK_NE(&from, this);
  const Disk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Disk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Disk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Disk)
    MergeFrom(*source);
  }
}

void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Disk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_system();
      file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mount();
      mount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_);
    }
    if (cached_has_bits & 0x00000004u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000008u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Disk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::Swap(Disk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Disk::InternalSwap(Disk* other) {
  using std::swap;
  file_system_.Swap(&other->file_system_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mount_.Swap(&other->mount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(usage_, other->usage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Disk::GetMetadata() const {
  protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Process::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Process::kTotalFieldNumber;
const int Process::kRunningFieldNumber;
const int Process::kSleepingFieldNumber;
const int Process::kStoppedFieldNumber;
const int Process::kZombieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Process::Process()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fdata_2eproto::scc_info_Process.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Process)
}
Process::Process(const Process& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&zombie_) -
    reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  // @@protoc_insertion_point(copy_constructor:Process)
}

void Process::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zombie_) -
      reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
}

Process::~Process() {
  // @@protoc_insertion_point(destructor:Process)
  SharedDtor();
}

void Process::SharedDtor() {
}

void Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Process::descriptor() {
  ::protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Process& Process::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fdata_2eproto::scc_info_Process.base);
  return *internal_default_instance();
}


void Process::Clear() {
// @@protoc_insertion_point(message_clear_start:Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zombie_) -
        reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Process)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 running = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sleeping = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sleeping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleeping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stopped = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_stopped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zombie = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_zombie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Process)
  return false;
#undef DO_
}

void Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 running = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->running(), output);
  }

  // optional int32 sleeping = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sleeping(), output);
  }

  // optional int32 stopped = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stopped(), output);
  }

  // optional int32 zombie = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zombie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Process)
}

::google::protobuf::uint8* Process::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // optional int32 running = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->running(), target);
  }

  // optional int32 sleeping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sleeping(), target);
  }

  // optional int32 stopped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stopped(), target);
  }

  // optional int32 zombie = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zombie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Process)
  return target;
}

size_t Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Process)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 running = 2;
    if (has_running()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->running());
    }

    // optional int32 sleeping = 3;
    if (has_sleeping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sleeping());
    }

    // optional int32 stopped = 4;
    if (has_stopped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stopped());
    }

    // optional int32 zombie = 5;
    if (has_zombie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zombie());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Process::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Process)
  GOOGLE_DCHECK_NE(&from, this);
  const Process* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Process>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Process)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Process)
    MergeFrom(*source);
  }
}

void Process::MergeFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      running_ = from.running_;
    }
    if (cached_has_bits & 0x00000004u) {
      sleeping_ = from.sleeping_;
    }
    if (cached_has_bits & 0x00000008u) {
      stopped_ = from.stopped_;
    }
    if (cached_has_bits & 0x00000010u) {
      zombie_ = from.zombie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Process::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Process::CopyFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {
  return true;
}

void Process::Swap(Process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Process::InternalSwap(Process* other) {
  using std::swap;
  swap(total_, other->total_);
  swap(running_, other->running_);
  swap(sleeping_, other->sleeping_);
  swap(stopped_, other->stopped_);
  swap(zombie_, other->zombie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Process::GetMetadata() const {
  protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void system_data::InitAsDefaultInstance() {
  ::_system_data_default_instance_._instance.get_mutable()->sys_cpu_ = const_cast< ::CPU*>(
      ::CPU::internal_default_instance());
  ::_system_data_default_instance_._instance.get_mutable()->phy_mem_ = const_cast< ::Memory*>(
      ::Memory::internal_default_instance());
  ::_system_data_default_instance_._instance.get_mutable()->swap_mem_ = const_cast< ::Memory*>(
      ::Memory::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int system_data::kSysCpuFieldNumber;
const int system_data::kCpusFieldNumber;
const int system_data::kPhyMemFieldNumber;
const int system_data::kSwapMemFieldNumber;
const int system_data::kDisksFieldNumber;
const int system_data::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

system_data::system_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_system_5fdata_2eproto::scc_info_system_data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:system_data)
}
system_data::system_data(const system_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      cpus_(from.cpus_),
      disks_(from.disks_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sys_cpu()) {
    sys_cpu_ = new ::CPU(*from.sys_cpu_);
  } else {
    sys_cpu_ = NULL;
  }
  if (from.has_phy_mem()) {
    phy_mem_ = new ::Memory(*from.phy_mem_);
  } else {
    phy_mem_ = NULL;
  }
  if (from.has_swap_mem()) {
    swap_mem_ = new ::Memory(*from.swap_mem_);
  } else {
    swap_mem_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:system_data)
}

void system_data::SharedCtor() {
  ::memset(&sys_cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_mem_) -
      reinterpret_cast<char*>(&sys_cpu_)) + sizeof(swap_mem_));
}

system_data::~system_data() {
  // @@protoc_insertion_point(destructor:system_data)
  SharedDtor();
}

void system_data::SharedDtor() {
  if (this != internal_default_instance()) delete sys_cpu_;
  if (this != internal_default_instance()) delete phy_mem_;
  if (this != internal_default_instance()) delete swap_mem_;
}

void system_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* system_data::descriptor() {
  ::protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const system_data& system_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_system_5fdata_2eproto::scc_info_system_data.base);
  return *internal_default_instance();
}


void system_data::Clear() {
// @@protoc_insertion_point(message_clear_start:system_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpus_.Clear();
  disks_.Clear();
  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sys_cpu_ != NULL);
      sys_cpu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(phy_mem_ != NULL);
      phy_mem_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(swap_mem_ != NULL);
      swap_mem_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool system_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:system_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CPU sys_cpu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sys_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CPU cpus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cpus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Memory phy_mem = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phy_mem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Memory swap_mem = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_swap_mem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Disk disks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_disks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Process tasks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:system_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:system_data)
  return false;
#undef DO_
}

void system_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:system_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPU sys_cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sys_cpu(), output);
  }

  // repeated .CPU cpus = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cpus(static_cast<int>(i)),
      output);
  }

  // optional .Memory phy_mem = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_phy_mem(), output);
  }

  // optional .Memory swap_mem = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_swap_mem(), output);
  }

  // repeated .Disk disks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->disks(static_cast<int>(i)),
      output);
  }

  // repeated .Process tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->tasks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:system_data)
}

::google::protobuf::uint8* system_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:system_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPU sys_cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sys_cpu(), deterministic, target);
  }

  // repeated .CPU cpus = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cpus(static_cast<int>(i)), deterministic, target);
  }

  // optional .Memory phy_mem = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_phy_mem(), deterministic, target);
  }

  // optional .Memory swap_mem = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_swap_mem(), deterministic, target);
  }

  // repeated .Disk disks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->disks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Process tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tasks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_data)
  return target;
}

size_t system_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CPU cpus = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cpus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cpus(static_cast<int>(i)));
    }
  }

  // repeated .Disk disks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->disks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->disks(static_cast<int>(i)));
    }
  }

  // repeated .Process tasks = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CPU sys_cpu = 1;
    if (has_sys_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sys_cpu_);
    }

    // optional .Memory phy_mem = 3;
    if (has_phy_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *phy_mem_);
    }

    // optional .Memory swap_mem = 4;
    if (has_swap_mem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *swap_mem_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void system_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:system_data)
  GOOGLE_DCHECK_NE(&from, this);
  const system_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const system_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:system_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:system_data)
    MergeFrom(*source);
  }
}

void system_data::MergeFrom(const system_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:system_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpus_.MergeFrom(from.cpus_);
  disks_.MergeFrom(from.disks_);
  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sys_cpu()->::CPU::MergeFrom(from.sys_cpu());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_phy_mem()->::Memory::MergeFrom(from.phy_mem());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_swap_mem()->::Memory::MergeFrom(from.swap_mem());
    }
  }
}

void system_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:system_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_data::CopyFrom(const system_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_data::IsInitialized() const {
  return true;
}

void system_data::Swap(system_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void system_data::InternalSwap(system_data* other) {
  using std::swap;
  CastToBase(&cpus_)->InternalSwap(CastToBase(&other->cpus_));
  CastToBase(&disks_)->InternalSwap(CastToBase(&other->disks_));
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  swap(sys_cpu_, other->sys_cpu_);
  swap(phy_mem_, other->phy_mem_);
  swap(swap_mem_, other->swap_mem_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata system_data::GetMetadata() const {
  protobuf_system_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CPU* Arena::CreateMaybeMessage< ::CPU >(Arena* arena) {
  return Arena::CreateInternal< ::CPU >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Memory* Arena::CreateMaybeMessage< ::Memory >(Arena* arena) {
  return Arena::CreateInternal< ::Memory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Disk* Arena::CreateMaybeMessage< ::Disk >(Arena* arena) {
  return Arena::CreateInternal< ::Disk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Process* Arena::CreateMaybeMessage< ::Process >(Arena* arena) {
  return Arena::CreateInternal< ::Process >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::system_data* Arena::CreateMaybeMessage< ::system_data >(Arena* arena) {
  return Arena::CreateInternal< ::system_data >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
