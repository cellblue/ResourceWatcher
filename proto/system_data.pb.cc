// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_data.proto

#include "system_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPU_system_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Disk_system_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_system_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Process_system_5fdata_2eproto;
class CPUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPU> _instance;
} _CPU_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memory> _instance;
} _Memory_default_instance_;
class DiskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Disk> _instance;
} _Disk_default_instance_;
class ProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Process> _instance;
} _Process_default_instance_;
class system_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<system_data> _instance;
} _system_data_default_instance_;
static void InitDefaultsscc_info_CPU_system_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPU_default_instance_;
    new (ptr) ::CPU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPU_system_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPU_system_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Disk_system_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Disk_default_instance_;
    new (ptr) ::Disk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Disk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Disk_system_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Disk_system_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Memory_system_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Memory_default_instance_;
    new (ptr) ::Memory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Memory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memory_system_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Memory_system_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Process_system_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Process_default_instance_;
    new (ptr) ::Process();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Process::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Process_system_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Process_system_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_system_data_system_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_system_data_default_instance_;
    new (ptr) ::system_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::system_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_system_data_system_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_system_data_system_5fdata_2eproto}, {
      &scc_info_CPU_system_5fdata_2eproto.base,
      &scc_info_Memory_system_5fdata_2eproto.base,
      &scc_info_Disk_system_5fdata_2eproto.base,
      &scc_info_Process_system_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_system_5fdata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_system_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_system_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_system_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CPU, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPU, name_),
  PROTOBUF_FIELD_OFFSET(::CPU, usage_),
  PROTOBUF_FIELD_OFFSET(::CPU, user_usage_),
  PROTOBUF_FIELD_OFFSET(::CPU, system_usage_),
  PROTOBUF_FIELD_OFFSET(::CPU, irq_usage_),
  PROTOBUF_FIELD_OFFSET(::CPU, softirq_usage_),
  PROTOBUF_FIELD_OFFSET(::CPU, running_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::Memory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Memory, name_),
  PROTOBUF_FIELD_OFFSET(::Memory, total_),
  PROTOBUF_FIELD_OFFSET(::Memory, used_),
  PROTOBUF_FIELD_OFFSET(::Memory, free_),
  PROTOBUF_FIELD_OFFSET(::Memory, shared_),
  PROTOBUF_FIELD_OFFSET(::Memory, buffer_or_cached_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Disk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Disk, file_system_),
  PROTOBUF_FIELD_OFFSET(::Disk, total_),
  PROTOBUF_FIELD_OFFSET(::Disk, usage_),
  PROTOBUF_FIELD_OFFSET(::Disk, mount_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::Process, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Process, total_),
  PROTOBUF_FIELD_OFFSET(::Process, running_),
  PROTOBUF_FIELD_OFFSET(::Process, sleeping_),
  PROTOBUF_FIELD_OFFSET(::Process, stopped_),
  PROTOBUF_FIELD_OFFSET(::Process, zombie_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::system_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::system_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::system_data, sys_cpu_),
  PROTOBUF_FIELD_OFFSET(::system_data, cpus_),
  PROTOBUF_FIELD_OFFSET(::system_data, phy_mem_),
  PROTOBUF_FIELD_OFFSET(::system_data, swap_mem_),
  PROTOBUF_FIELD_OFFSET(::system_data, disks_),
  PROTOBUF_FIELD_OFFSET(::system_data, tasks_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::CPU)},
  { 19, 30, sizeof(::Memory)},
  { 36, 45, sizeof(::Disk)},
  { 49, 59, sizeof(::Process)},
  { 64, 75, sizeof(::system_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Memory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Disk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Process_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_system_data_default_instance_),
};

const char descriptor_table_protodef_system_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021system_data.proto\"\214\001\n\003CPU\022\014\n\004name\030\001 \001("
  "\t\022\r\n\005usage\030\002 \001(\002\022\022\n\nuser_usage\030\003 \001(\002\022\024\n\014"
  "system_usage\030\004 \001(\002\022\021\n\tirq_usage\030\005 \001(\002\022\025\n"
  "\rsoftirq_usage\030\006 \001(\002\022\024\n\014running_time\030\007 \001"
  "(\005\"k\n\006Memory\022\014\n\004name\030\001 \001(\t\022\r\n\005total\030\002 \001("
  "\002\022\014\n\004used\030\003 \001(\002\022\014\n\004free\030\004 \001(\002\022\016\n\006shared\030"
  "\005 \001(\002\022\030\n\020buffer_or_cached\030\006 \001(\002\"H\n\004Disk\022"
  "\023\n\013file_system\030\001 \001(\t\022\r\n\005total\030\002 \001(\002\022\r\n\005u"
  "sage\030\003 \001(\002\022\r\n\005mount\030\004 \001(\t\"\\\n\007Process\022\r\n\005"
  "total\030\001 \001(\005\022\017\n\007running\030\002 \001(\005\022\020\n\010sleeping"
  "\030\003 \001(\005\022\017\n\007stopped\030\004 \001(\005\022\016\n\006zombie\030\005 \001(\005\""
  "\234\001\n\013system_data\022\025\n\007sys_cpu\030\001 \001(\0132\004.CPU\022\022"
  "\n\004cpus\030\002 \003(\0132\004.CPU\022\030\n\007phy_mem\030\003 \001(\0132\007.Me"
  "mory\022\031\n\010swap_mem\030\004 \001(\0132\007.Memory\022\024\n\005disks"
  "\030\005 \003(\0132\005.Disk\022\027\n\005tasks\030\006 \003(\0132\010.Process"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_system_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_system_5fdata_2eproto_sccs[5] = {
  &scc_info_CPU_system_5fdata_2eproto.base,
  &scc_info_Disk_system_5fdata_2eproto.base,
  &scc_info_Memory_system_5fdata_2eproto.base,
  &scc_info_Process_system_5fdata_2eproto.base,
  &scc_info_system_data_system_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_system_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_5fdata_2eproto = {
  false, false, descriptor_table_protodef_system_5fdata_2eproto, "system_data.proto", 598,
  &descriptor_table_system_5fdata_2eproto_once, descriptor_table_system_5fdata_2eproto_sccs, descriptor_table_system_5fdata_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_system_5fdata_2eproto::offsets,
  file_level_metadata_system_5fdata_2eproto, 5, file_level_enum_descriptors_system_5fdata_2eproto, file_level_service_descriptors_system_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_system_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_system_5fdata_2eproto)), true);

// ===================================================================

void CPU::InitAsDefaultInstance() {
}
class CPU::_Internal {
 public:
  using HasBits = decltype(std::declval<CPU>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_system_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_irq_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_softirq_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_running_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CPU::CPU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPU)
}
CPU::CPU(const CPU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_time_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
  // @@protoc_insertion_point(copy_constructor:CPU)
}

void CPU::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPU_system_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_time_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
}

CPU::~CPU() {
  // @@protoc_insertion_point(destructor:CPU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPU::ArenaDtor(void* object) {
  CPU* _this = reinterpret_cast< CPU* >(object);
  (void)_this;
}
void CPU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPU& CPU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPU_system_5fdata_2eproto.base);
  return *internal_default_instance();
}


void CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&usage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&running_time_) -
        reinterpret_cast<char*>(&usage_)) + sizeof(running_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPU.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_usage(&has_bits);
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float user_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_user_usage(&has_bits);
          user_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float system_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_system_usage(&has_bits);
          system_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float irq_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_irq_usage(&has_bits);
          irq_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float softirq_usage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_softirq_usage(&has_bits);
          softirq_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 running_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_running_time(&has_bits);
          running_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPU.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float usage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_usage(), target);
  }

  // optional float user_usage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_user_usage(), target);
  }

  // optional float system_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_system_usage(), target);
  }

  // optional float irq_usage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_irq_usage(), target);
  }

  // optional float softirq_usage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_softirq_usage(), target);
  }

  // optional int32 running_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_running_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPU)
  return target;
}

size_t CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float usage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float user_usage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float system_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float irq_usage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float softirq_usage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 running_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_running_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPU)
  GOOGLE_DCHECK_NE(&from, this);
  const CPU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPU)
    MergeFrom(*source);
  }
}

void CPU::MergeFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_usage_ = from.user_usage_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_usage_ = from.system_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      irq_usage_ = from.irq_usage_;
    }
    if (cached_has_bits & 0x00000020u) {
      softirq_usage_ = from.softirq_usage_;
    }
    if (cached_has_bits & 0x00000040u) {
      running_time_ = from.running_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPU::CopyFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPU::IsInitialized() const {
  return true;
}

void CPU::InternalSwap(CPU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPU, running_time_)
      + sizeof(CPU::running_time_)
      - PROTOBUF_FIELD_OFFSET(CPU, usage_)>(
          reinterpret_cast<char*>(&usage_),
          reinterpret_cast<char*>(&other->usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
}
class Memory::_Internal {
 public:
  using HasBits = decltype(std::declval<Memory>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_used(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_free(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buffer_or_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Memory::Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Memory)
}
Memory::Memory(const Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_or_cached_) -
    reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
  // @@protoc_insertion_point(copy_constructor:Memory)
}

void Memory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Memory_system_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_or_cached_) -
      reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:Memory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Memory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Memory::ArenaDtor(void* object) {
  Memory* _this = reinterpret_cast< Memory* >(object);
  (void)_this;
}
void Memory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memory& Memory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memory_system_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffer_or_cached_) -
        reinterpret_cast<char*>(&total_)) + sizeof(buffer_or_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Memory.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_used(&has_bits);
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_free(&has_bits);
          free_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shared = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_shared(&has_bits);
          shared_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float buffer_or_cached = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_buffer_or_cached(&has_bits);
          buffer_or_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Memory.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_total(), target);
  }

  // optional float used = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_used(), target);
  }

  // optional float free = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_free(), target);
  }

  // optional float shared = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_shared(), target);
  }

  // optional float buffer_or_cached = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_buffer_or_cached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float used = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float free = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float shared = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float buffer_or_cached = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Memory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000004u) {
      used_ = from.used_;
    }
    if (cached_has_bits & 0x00000008u) {
      free_ = from.free_;
    }
    if (cached_has_bits & 0x00000010u) {
      shared_ = from.shared_;
    }
    if (cached_has_bits & 0x00000020u) {
      buffer_or_cached_ = from.buffer_or_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Memory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::InternalSwap(Memory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Memory, buffer_or_cached_)
      + sizeof(Memory::buffer_or_cached_)
      - PROTOBUF_FIELD_OFFSET(Memory, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Memory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Disk::InitAsDefaultInstance() {
}
class Disk::_Internal {
 public:
  using HasBits = decltype(std::declval<Disk>()._has_bits_);
  static void set_has_file_system(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Disk::Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Disk)
}
Disk::Disk(const Disk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_system()) {
    file_system_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_system(),
      GetArena());
  }
  mount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mount()) {
    mount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mount(),
      GetArena());
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&usage_) -
    reinterpret_cast<char*>(&total_)) + sizeof(usage_));
  // @@protoc_insertion_point(copy_constructor:Disk)
}

void Disk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Disk_system_5fdata_2eproto.base);
  file_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usage_) -
      reinterpret_cast<char*>(&total_)) + sizeof(usage_));
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:Disk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Disk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Disk::ArenaDtor(void* object) {
  Disk* _this = reinterpret_cast< Disk* >(object);
  (void)_this;
}
void Disk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Disk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Disk& Disk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Disk_system_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:Disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_system_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mount_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_) -
        reinterpret_cast<char*>(&total_)) + sizeof(usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_system();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Disk.file_system");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_usage(&has_bits);
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string mount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Disk.mount");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Disk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Disk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_system = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_system().data(), static_cast<int>(this->_internal_file_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Disk.file_system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_system(), target);
  }

  // optional float total = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_total(), target);
  }

  // optional float usage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_usage(), target);
  }

  // optional string mount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mount().data(), static_cast<int>(this->_internal_mount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Disk.mount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Disk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_system = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_system());
    }

    // optional string mount = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mount());
    }

    // optional float total = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float usage = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Disk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Disk)
  GOOGLE_DCHECK_NE(&from, this);
  const Disk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Disk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Disk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Disk)
    MergeFrom(*source);
  }
}

void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Disk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_system(from._internal_file_system());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mount(from._internal_mount());
    }
    if (cached_has_bits & 0x00000004u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000008u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Disk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::InternalSwap(Disk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_system_.Swap(&other->file_system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mount_.Swap(&other->mount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Disk, usage_)
      + sizeof(Disk::usage_)
      - PROTOBUF_FIELD_OFFSET(Disk, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Disk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Process::InitAsDefaultInstance() {
}
class Process::_Internal {
 public:
  using HasBits = decltype(std::declval<Process>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_running(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sleeping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_zombie(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Process::Process(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Process)
}
Process::Process(const Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&zombie_) -
    reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  // @@protoc_insertion_point(copy_constructor:Process)
}

void Process::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zombie_) -
      reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
}

Process::~Process() {
  // @@protoc_insertion_point(destructor:Process)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Process::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Process::ArenaDtor(void* object) {
  Process* _this = reinterpret_cast< Process* >(object);
  (void)_this;
}
void Process::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Process& Process::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Process_system_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Process::Clear() {
// @@protoc_insertion_point(message_clear_start:Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zombie_) -
        reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Process::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_running(&has_bits);
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sleeping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sleeping(&has_bits);
          sleeping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stopped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stopped(&has_bits);
          stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 zombie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_zombie(&has_bits);
          zombie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Process::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total(), target);
  }

  // optional int32 running = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_running(), target);
  }

  // optional int32 sleeping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sleeping(), target);
  }

  // optional int32 stopped = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stopped(), target);
  }

  // optional int32 zombie = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_zombie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Process)
  return target;
}

size_t Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Process)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total());
    }

    // optional int32 running = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_running());
    }

    // optional int32 sleeping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sleeping());
    }

    // optional int32 stopped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stopped());
    }

    // optional int32 zombie = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_zombie());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Process::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Process)
  GOOGLE_DCHECK_NE(&from, this);
  const Process* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Process>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Process)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Process)
    MergeFrom(*source);
  }
}

void Process::MergeFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      running_ = from.running_;
    }
    if (cached_has_bits & 0x00000004u) {
      sleeping_ = from.sleeping_;
    }
    if (cached_has_bits & 0x00000008u) {
      stopped_ = from.stopped_;
    }
    if (cached_has_bits & 0x00000010u) {
      zombie_ = from.zombie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Process::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Process::CopyFrom(const Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {
  return true;
}

void Process::InternalSwap(Process* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Process, zombie_)
      + sizeof(Process::zombie_)
      - PROTOBUF_FIELD_OFFSET(Process, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Process::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void system_data::InitAsDefaultInstance() {
  ::_system_data_default_instance_._instance.get_mutable()->sys_cpu_ = const_cast< ::CPU*>(
      ::CPU::internal_default_instance());
  ::_system_data_default_instance_._instance.get_mutable()->phy_mem_ = const_cast< ::Memory*>(
      ::Memory::internal_default_instance());
  ::_system_data_default_instance_._instance.get_mutable()->swap_mem_ = const_cast< ::Memory*>(
      ::Memory::internal_default_instance());
}
class system_data::_Internal {
 public:
  using HasBits = decltype(std::declval<system_data>()._has_bits_);
  static const ::CPU& sys_cpu(const system_data* msg);
  static void set_has_sys_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Memory& phy_mem(const system_data* msg);
  static void set_has_phy_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Memory& swap_mem(const system_data* msg);
  static void set_has_swap_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CPU&
system_data::_Internal::sys_cpu(const system_data* msg) {
  return *msg->sys_cpu_;
}
const ::Memory&
system_data::_Internal::phy_mem(const system_data* msg) {
  return *msg->phy_mem_;
}
const ::Memory&
system_data::_Internal::swap_mem(const system_data* msg) {
  return *msg->swap_mem_;
}
system_data::system_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cpus_(arena),
  disks_(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:system_data)
}
system_data::system_data(const system_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cpus_(from.cpus_),
      disks_(from.disks_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sys_cpu()) {
    sys_cpu_ = new ::CPU(*from.sys_cpu_);
  } else {
    sys_cpu_ = nullptr;
  }
  if (from._internal_has_phy_mem()) {
    phy_mem_ = new ::Memory(*from.phy_mem_);
  } else {
    phy_mem_ = nullptr;
  }
  if (from._internal_has_swap_mem()) {
    swap_mem_ = new ::Memory(*from.swap_mem_);
  } else {
    swap_mem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:system_data)
}

void system_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_system_data_system_5fdata_2eproto.base);
  ::memset(&sys_cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_mem_) -
      reinterpret_cast<char*>(&sys_cpu_)) + sizeof(swap_mem_));
}

system_data::~system_data() {
  // @@protoc_insertion_point(destructor:system_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void system_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sys_cpu_;
  if (this != internal_default_instance()) delete phy_mem_;
  if (this != internal_default_instance()) delete swap_mem_;
}

void system_data::ArenaDtor(void* object) {
  system_data* _this = reinterpret_cast< system_data* >(object);
  (void)_this;
}
void system_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void system_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const system_data& system_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_system_data_system_5fdata_2eproto.base);
  return *internal_default_instance();
}


void system_data::Clear() {
// @@protoc_insertion_point(message_clear_start:system_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpus_.Clear();
  disks_.Clear();
  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sys_cpu_ != nullptr);
      sys_cpu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(phy_mem_ != nullptr);
      phy_mem_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(swap_mem_ != nullptr);
      swap_mem_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* system_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CPU sys_cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CPU cpus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Memory phy_mem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phy_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Memory swap_mem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_swap_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Disk disks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Process tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* system_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:system_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPU sys_cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sys_cpu(this), target, stream);
  }

  // repeated .CPU cpus = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cpus(i), target, stream);
  }

  // optional .Memory phy_mem = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::phy_mem(this), target, stream);
  }

  // optional .Memory swap_mem = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::swap_mem(this), target, stream);
  }

  // repeated .Disk disks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_disks(i), target, stream);
  }

  // repeated .Process tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:system_data)
  return target;
}

size_t system_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:system_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPU cpus = 2;
  total_size += 1UL * this->_internal_cpus_size();
  for (const auto& msg : this->cpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Disk disks = 5;
  total_size += 1UL * this->_internal_disks_size();
  for (const auto& msg : this->disks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Process tasks = 6;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CPU sys_cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sys_cpu_);
    }

    // optional .Memory phy_mem = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *phy_mem_);
    }

    // optional .Memory swap_mem = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_mem_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void system_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:system_data)
  GOOGLE_DCHECK_NE(&from, this);
  const system_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<system_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:system_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:system_data)
    MergeFrom(*source);
  }
}

void system_data::MergeFrom(const system_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:system_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpus_.MergeFrom(from.cpus_);
  disks_.MergeFrom(from.disks_);
  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sys_cpu()->::CPU::MergeFrom(from._internal_sys_cpu());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_phy_mem()->::Memory::MergeFrom(from._internal_phy_mem());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_swap_mem()->::Memory::MergeFrom(from._internal_swap_mem());
    }
  }
}

void system_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:system_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_data::CopyFrom(const system_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:system_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_data::IsInitialized() const {
  return true;
}

void system_data::InternalSwap(system_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cpus_.InternalSwap(&other->cpus_);
  disks_.InternalSwap(&other->disks_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(system_data, swap_mem_)
      + sizeof(system_data::swap_mem_)
      - PROTOBUF_FIELD_OFFSET(system_data, sys_cpu_)>(
          reinterpret_cast<char*>(&sys_cpu_),
          reinterpret_cast<char*>(&other->sys_cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata system_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPU* Arena::CreateMaybeMessage< ::CPU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPU >(arena);
}
template<> PROTOBUF_NOINLINE ::Memory* Arena::CreateMaybeMessage< ::Memory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Memory >(arena);
}
template<> PROTOBUF_NOINLINE ::Disk* Arena::CreateMaybeMessage< ::Disk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Disk >(arena);
}
template<> PROTOBUF_NOINLINE ::Process* Arena::CreateMaybeMessage< ::Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Process >(arena);
}
template<> PROTOBUF_NOINLINE ::system_data* Arena::CreateMaybeMessage< ::system_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::system_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
